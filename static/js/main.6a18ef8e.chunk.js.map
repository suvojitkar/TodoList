{"version":3,"sources":["redux-mgmt/actions.js","components/Listitems/Listitems.js","components/Footer/Footer.js","App.js","reportWebVitals.js","redux-mgmt/appState.js","redux-mgmt/reducers.js","index.js"],"names":["CHANGE_DEV","Listitems","props","listItems","items","todoItems","map","Card","className","Body","Row","Col","xs","text","onClick","DeleteTask","key","duration","easing","Footer","App","state","currentTask","taskInputHandler","bind","$event","this","setState","target","value","id","type","placeholder","onChange","autoComplete","AddTask","Component","connect","developer","Developer","dispatch","changeDeveloper","name","fetch","then","res","json","resp2","info","payload","task","console","log","createdAt","Date","getTime","addtask","taskId","deletetask","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","appState","currentTodoItem","ADD_TASK","DELETE_TASK","reducer","initialState","action","concat","afterDeleteItems","filter","tasks","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Mystore","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.6a18ef8e.chunk.js","sourcesContent":["/*\nAction defines which reducer is to be used\n*/\n\n// Action Types\nconst CHANGE_DEV = 'CHANGE_DEV';\nconst ADD_TASK = 'ADD_TASK';\nconst DELETE_TASK = 'DELETE_TASK';\n\n// Action Creater\nconst testDevName = (name) => {\n    return {\n        type: CHANGE_DEV,\n        info: 'This action is used to change developer name',\n        payload: name\n    }\n}\n\nexport const addtask = (task) => {\n    console.log('Lets make a action object for adding the task:', task);\n    return {\n        type: ADD_TASK,\n        info: 'This action is used to add new task',\n        payload: task,\n        createdAt: new Date().getTime()\n    }\n}\n\nexport const deletetask = (taskId) => {\n    console.log('Lets make a action object for deleting the task:', taskId);\n    return {\n        type: DELETE_TASK,\n        info: 'This action is used to Delete task',\n        payload: taskId\n    }\n}\n\nexport const changeDevName = (name) => {\n    return (dispatch) => {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(res=>res.json())\n        .then(resp2 => {\n            dispatch({\n                type: CHANGE_DEV,\n                info: 'This action is  used to change developer name',\n                payload: resp2[0].name\n            });\n        })\n    }\n}\n\n// export default { addtask, changeDevName }","import React from 'react'\nimport FlipMove from 'react-flip-move';\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Trash, Pencil } from 'react-bootstrap-icons';\n\nfunction Listitems(props) {\n    const listItems = props.items.todoItems.map(items => {\n        return <Card className=\"listTask\" key={ items.key }>\n            <Card.Body className=\"taskText\">\n                <Row>\n                    <Col xs={9}>{items.text}</Col>\n                    <Col xs={1} className=\"userIcon\" onClick={() => props.items.DeleteTask(items.key)} ><Trash/></Col>\n                    <Col xs={1}><Pencil /></Col>\n                    <Col xs={1}></Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    });\n\n    return (\n        <div>\n            <FlipMove duration={300} easing=\"ease-in-out\">\n                {listItems}\n            </FlipMove>\n        </div>\n    )\n}\n\nexport default Listitems;\n","import React from 'react'\n\nfunction Footer() {\n    return (\n        <div className=\"footer\">\n            <p>Developed by: @suvojitKar</p>\n        </div>\n    )\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addtask, deletetask, changeDevName } from './redux-mgmt/actions';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport Listitems from './components/Listitems/Listitems';\nimport './components/Listitems/Listitems.css';\nimport Footer from './components/Footer/Footer';\nimport './components/Footer/Footer.css';\n\nexport class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTask: ''\n    }\n    this.taskInputHandler = this.taskInputHandler.bind(this);\n  } \n\n  taskInputHandler($event) {\n    this.setState({\n      currentTask: $event.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <center>\n          <h1 className=\"projectHeader\"> Dev Analyser </h1>\n        </center>\n\n        <div id=\"add-task-bar\" className=\"App\">\n          <input type=\"text\" id=\"currentTask\" placeholder=\"Enter a task\" value={ this.state.currentTask} onChange={ this.taskInputHandler} autoComplete=\"off\"></input>\n          <button onClick={() => { this.props.AddTask(this.state.currentTask) }}> Add</button>\n          <Listitems items={this.props}></Listitems>\n        </div>\n        <Footer></Footer>\n      </div>\n    )\n  }\n}\n\n// create props from global state variable\nconst mapStateToProps = (state) => {\n  return {\n    todoItems: state.todoItems,\n    developer: state.Developer\n  }\n}\n\n// create props for actions\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    changeDeveloper: (name) => {\n      dispatch(changeDevName(name));\n    },\n    AddTask: (task) => {\n      console.log('User action indicates to dispatch an action to add items:', task);\n      dispatch(addtask(task));\n    },\n    DeleteTask: (taskId) => {\n      console.log('User action indicates to dispatch an action to delete items:', taskId);\n      dispatch(deletetask(taskId));\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const appState = {\n    todoItems: [],\n    currentTodoItem: {\n        text: '',\n        key: ''\n    },\n    Developer: 'suvojit'\n}\n\nexport default appState;","import initialState from './appState';\n\n/*\nApp do not change the store data directly\nReducer function is used to change store data\n*/\n\n// App Reducer\nconst CHANGE_DEV = 'CHANGE_DEV';\nconst ADD_TASK = 'ADD_TASK';\nconst DELETE_TASK = 'DELETE_TASK';\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case CHANGE_DEV:\n            return {\n                ...state,\n                Developer: action.payload\n            }\n        case ADD_TASK:\n            console.log('Let the reducer deal with global state based on action type:', ADD_TASK);\n            return {\n                ...state,\n                todoItems: state.todoItems.concat({ text: action.payload, key: action.createdAt})\n            }\n        case DELETE_TASK:\n            console.log('Let the reducer deal with global state based on action type:', DELETE_TASK);\n            let afterDeleteItems = state.todoItems.filter(tasks => tasks.key !== action.payload);\n            return {\n                ...state,\n                todoItems: afterDeleteItems\n            }\n        default: return state\n    }\n}\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\n\nimport reducer from './redux-mgmt/reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n// store cration\nconst Mystore = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={Mystore}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}